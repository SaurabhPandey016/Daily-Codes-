#include <bits/stdc++.h> 
struct Node{
	Node* links[26];
	int endsHere = 0;
};
class Trie{
private:
	Node *root;
public:
	Trie(){
		root = new Node();
	}
	void insert(string word){
		Node *node = root;
		for(char ch : word){
			if(node->links[ch-'a'] == NULL) node->links[ch-'a'] = new Node();
			node = node->links[ch-'a'];
		}
		node->endsHere++;
	}
	int findCountAllWordsInSuffix(string suffix){
		Node* node = root;
		int wordsFound = 0;
		for(char ch : suffix){
			if(node->links[ch-'a'] == NULL) return wordsFound;
			node = node->links[ch-'a'];
			wordsFound += node->endsHere;
		}
		return wordsFound;
	}
};
vector<int> searchWords(string booklet, vector<string> &diary){
	Trie trie;
	for(string word : diary) trie.insert(word);
	vector<int> indices;
	int n = booklet.size();
	for(int startIndex=0;startIndex<n;startIndex++){
		string suffix = booklet.substr(startIndex,min(30,n-startIndex));
		int foundCount = trie.findCountAllWordsInSuffix(suffix);
		while(foundCount--) indices.push_back(startIndex);
	}
	return indices;	
}
