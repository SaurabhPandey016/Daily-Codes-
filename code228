int savingMoney(int n, int source, int destination, int K, vector<vector<int>> &trains)
{
    // Write your code here
    vector<pair<int,int>> adj[n];
    for(auto it : trains){
        adj[it[0]].push_back({it[1], it[2]});
    }

    vector<int> dist(n, 1e9);
    queue<pair<int, pair<int,int>>> q;
    q.push({0, {source, 0}}); //{stops, {node, cost}};
    dist[source] = 0;

    if(source == destination) return 0;
    
    while(!q.empty()){
        int stops = q.front().first;
        int node = q.front().second.first;
        int cost = q.front().second.second;
        q.pop();

        if(stops > K) continue;

        for(auto it : adj[node]){
            int adjNode = it.first;
            int edw = it.second;

            if(cost + edw < dist[adjNode] && stops <= K){
                dist[adjNode] = cost + edw;
                q.push({stops+1, {adjNode, cost+edw}});
            }
        }
    }
    if(dist[destination] == 1e9) return -1;
    return dist[destination];
}
