/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        
        if(head == NULL || head-> next == NULL) return head;

        ListNode *evenHead = NULL, *evenTail = NULL;
        ListNode *oddHead = NULL, *oddTail = NULL;

        int cnt = 1;
        while(head != NULL)
        {
            if(cnt % 2 != 0) // Odd Case
            {
                if(oddHead == NULL)
                {
                    oddHead = head;
                    oddTail = head;
                    head = head-> next;
                }
                else  // If Not NULL Then 
                {
                    oddTail-> next = head;
                    oddTail = oddTail-> next;
                    head = head-> next;
                }
            }
            else  // Even Case
            {
                if(evenHead == NULL) 
                {
                    evenHead = head;
                    evenTail = head;
                    head = head-> next;
                }
                else // If Not NULL
                {
                    evenTail-> next = head;
                    evenTail = evenTail-> next;
                    head = head-> next; 
                }
            }
            cnt++;
        } 
            
        oddTail-> next = evenHead;
        evenTail-> next = NULL;

        return oddHead;
    }
};
