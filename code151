import java.util.*;

public class Solution {

    public static int f(int L,int R,String s,int dp[][]){

        if(L > R) return 0;

        if(L == R) return 1;

        if(dp[L][R] != -1) return dp[L][R];

        if(s.charAt(L) == s.charAt(R)) return dp[L][R] = (1 + f(L+1,R,s,dp) + f(L,R-1,s,dp)) % 1000000007;

        return dp[L][R] = (f(L+1,R,s,dp) + f(L,R-1,s,dp) - f(L+1,R-1,s,dp)) % 1000000007;

    }

    public static int countPalindromicSubseq(String s) {

        int N = s.length();

        int dp[][] = new int[N][N];

        for(int row[] : dp) Arrays.fill(row,-1);

        return f(0,N-1,s,dp);

    }

}
