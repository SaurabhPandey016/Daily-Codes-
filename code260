/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int ans =0;
public:
    pair<int,int> Solve(TreeNode *node, int &ans){
        if(!node){
            return {0,0};
        }
        auto [leftSum,leftCount] = Solve(node->left,ans);
        auto [rightSum,rightCount] = Solve(node->right,ans);

        int currSum = node->val + leftSum + rightSum;
        int currCount = 1 + leftCount + rightCount;
        if(currSum/currCount == node->val ) ans++;
        return {currSum,currCount};
    }
    int averageOfSubtree(TreeNode* root) {
        int ans = 0;
        Solve(root,ans);
        return ans;
    }
};
