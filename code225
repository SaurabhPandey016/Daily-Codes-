int minSteps(pair<int, int> knightPosition, pair<int, int> targetPosition, int size) {

    int x1= knightPosition.first;

 

    int y1=knightPosition.second;

 

    int x2=targetPosition.first;

 

    int y2= targetPosition.second;

 

 

 

    if(x1==x2 && y1==y2)return 0;

 

    queue<pair<int ,int>>q;

 

    q.push({x1-1,y1-1});

 

 

 

    vector<vector<int>>a(size,vector<int>(size,0));

 

 

 

    int row[]={1,2,1,2,-1,-2,-1,-2};

 

    int col[]={2,1,-2,-1,2,1,-2,-1};

 

    while(!q.empty()){

        auto it=q.front();

        q.pop();

        int r=it.first;

        int c=it.second;

 

        for(int i=0;i<8;i++){

            int nrow=r+row[i];

            int ncol=c+col[i];

 

            if(nrow>=0&&nrow<size&&ncol>=0&&ncol<size&&a[nrow][ncol]==0){

                a[nrow][ncol]=1+a[r][c];

                q.push({nrow,ncol});

            }

 

        }

    }

 

    return a[x2-1][y2-1];

 

}
