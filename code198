#include<bits/stdc++.h>

int minDiceThrowToLastCell(int **board, int n)
{
  map<int, int> mp;
  bool ltr = true;
  int k = 1;

  for (int i = n - 1; i >= 0; i--) {
    if (ltr) {
      for (int j = 0; j < n; j++, k++) {
        if (board[i][j] != -1)
          mp[k] = board[i][j];
      }
    } else {
      for (int j = n - 1; j >= 0; j--, k++) {
        if (board[i][j] != -1)
          mp[k] = board[i][j];
      }
    }
    ltr = !ltr;
  }

  queue<pair<int, int>> q;
  q.push({1, 0});

  vector<int> vis(n * n + 1);
  vis[1] = 1;

  while (!q.empty()) {
    auto p = q.front();
    q.pop();

    int sq = p.first, steps = p.second;
    for (int i = 1; i <= 6; i++) {
      int newSq = sq + i;
      if (mp.count(newSq))
        newSq = mp[newSq];
    
        if(newSq > n *n)
            break;

      if (newSq == n * n)
        return steps + 1;

      if (!vis[newSq]) {
        vis[newSq] = 1;
        q.push({newSq, steps + 1});
      }
    }
  }

  return -1;
}
